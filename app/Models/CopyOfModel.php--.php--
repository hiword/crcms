<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model as BaseModel;
use Fields\Fields;
use Carbon\Carbon;
use DateTime;
use App\Fields\Field;
abstract class Model extends BaseModel {
	
	/**
	 * 软删除所需时间字段
	 * @var array
	 */
	protected $dates = ['deleted_at'];
	
	/**
	 * 时间戳格式
	 * @var mixed
	 */
	protected $dateFormat = 'U';
	
	/**
	 * 黑名单 为空则表示关闭
	 * @var array
	 */
	protected $guarded = array();
	
	
	/**
	 * 数据存储标志
	 * @var string
	 */
	const DATA_STORE = 'store';
	
	/**
	 * 数据修改标志
	 * @var string
	 */
	const DATA_UPDATE = 'update';
	
	
	/**
	 * 数据销毁标志
	 * @var string
	 */
	const DATA_DESTROY = 'destroy';
	
	/**
	 * 模型数据
	 * @var array
	 */
	protected $data = array();
	
	/**
	 * 获取当前时间
	 * @return int
	 */
	public function freshTimestamp()
	{
		return time();
	}
	
	/**
	 * 避免转换时间戳为时间字符串
	 * @param DateTime|int $value
	 * @return DateTime|int
	 */
	public function fromDateTime($value)
	{
		return $value;
	}
	
	/**
	 * Get a plain attribute (not a relationship).
	 *
	 * @param  string  $key
	 * @return mixed
	 */
	public function getAttributeValue($key)
	{
		$value = $this->getAttributeFromArray($key);
	
		// If the attribute has a get mutator, we will call that then return what
		// it returns as the value, which is useful for transforming values on
		// retrieval from the model to a form that is more useful for usage.
		if ($this->hasGetMutator($key)) {
			return $this->mutateAttribute($key, $value);
		}
	
		// If the attribute exists within the cast array, we will convert it to
		// an appropriate native PHP type dependant upon the associated value
		// given with the key in the pair. Dayle made this comment line up.
		if ($this->hasCast($key)) {
			$value = $this->castAttribute($key, $value);
		}
	
		// If the attribute is listed as a date, we will convert it to a DateTime
		// instance on retrieval, which makes it quite convenient to work with
		// date fields without having to create a mutator for each property.
		//自动维护的三个时间字段，直接返回时间戳
		elseif (in_array($key, $this->getDates())) {
			return $value;
			/* if (!is_null($value)) {
				return $this->asDateTime($value);
			} */
		}
	
		return $value;
	}
	/**
	 * 设置模型数据
	 * @param array $data
	 * @return \App\Models\Model
	 */
	protected function setData(array $data)
	{
		$data && $this->data = $data;
		return $this;
	}

	/**
	 * 设置处理模型
	 * @param string $action
	 */
	protected function setDataHandleMethod($action = null)
	{
		//公共方法
		method_exists($this, 'dataHandle') && $this->dataHandle();
		
		if ($action)
		{
			$action = 'data'.ucwords($action).'Handle';
			method_exists($this, $action) && $this->$action();
		}
		
		return $action;
	}
	
	/**
	 * 内置字段处理
	 * @param string $uid
	 * @param string $type
	 * @author simon
	 */
	protected function setBuiltInValue($uid,$type)
	{
		
		$session = user_session();
		if ($session)
		{
			$uidValue = $session->id;
			$typeValue = $session->session_type;
		}
		else
		{
			$uidValue = 0;
			$typeValue = 0;
		}
		
		$this->data[$uid] = isset($this->data[$uid]) ? $this->data[$uid] : $uidValue;
		$this->data[$type] = isset($this->data[$type]) ? $this->data[$type] : $typeValue;
	}
	
	/**
	 * 数据添加处理
	 */
	protected function dataStoreHandle()
	{
		//$this->setBuiltInValue('created_uid', 'created_type');
		$this->data['created_uid'] = intval(user_session('id'));
		$this->data['created_type'] = intval(user_session('session_type'));
	}

	/**
	 * 添加新数据[created]
	 * @param array $data
	 * @return Ambigous <boolean, NULL>
	 */
	public function storeData(array $data = array())
	{
		
		//设置默认值
		$this->setData($data);
		
		//
		$this->setDataHandleMethod(static::DATA_STORE);
		
		//保存数据
		return $this->create($this->data);
	}
	
	/**
	 * 数据修改处理
	 */
	protected function dataUpdateHandle()
	{
		$this->setBuiltInValue('updated_uid', 'updated_type');
	}
	
	/**
	 * 保存数据
	 * @param numeric $id
	 * @param array $data
	 * @return Ambigous <boolean, NULL>
	 */
	public function updateData($id,array $data = array())
	{
		//设置默认值
		$this->setData($data);
		
		//
		$this->setDataHandleMethod(static::DATA_UPDATE);
		
		//保存数据
		
		//复合主键支持
		if (is_array($this->primaryKey) && is_array($id)) 
		{
			$object = $this->where($id);
		}
		else
		{
			$object = $this->where($this->primaryKey,$id);
		}
		
		return $object->update($this->data);
	}
	
	
	/**
	 * 数据修改处理
	 */
	protected function dataDestroyHandle()
	{
		$this->setBuiltInValue('deleted_uid', 'deleted_type');
	}
	
	/**
	 * 数据销毁
	 * @param array|string|object $data
	 * @return \Illuminate\Routing\Route
	 */
	public function destroyData(array $data)
	{
		
		//设置默认值
		$this->setData($data);
		
		//
		$this->setDataHandleMethod(static::DATA_DESTROY);
		
		//这里先这样，回头肯定有where条件什么的，where也必须传递数组
		
		//$this->primaryKey这里primaryKey只支持单字段
		$data = isset($this->data[$this->primaryKey]) ? $this->data[$this->primaryKey] : $this->data;
		
		return $this->destroy($data);
	}
	
	/**
	 * 获取指定字段
	 * @param array $keys  允许的字段
	 * @param array $data   Field填充数据
	 * @param string $method  Field中运行的方法
	 * @return array
	 * @author simon
	 */
	public static function fields(array $fields = [],$data = [],$method = null)
	{
		$allowFields = static::$fields;
		
		if (!empty($fields))
		{
			foreach($allowFields as $key=>$value)
			{
				if (!in_array($key,$fields,true)) unset($allowFields[$key]);
			}
		}
	
		//参数快捷便利化
		if (is_string($data))
		{
			$method = $data;
			$data = [];
		}
		
		return Field::factory($allowFields,$data,$method);
	}
}