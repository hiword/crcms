<?php
/**
 * Created by PhpStorm.
 * User: simon
 * Date: 2016/8/21
 * Time: 12:01
 */

namespace Simon\User\Repositorys;


use Illuminate\Support\Facades\Hash;
use Simon\Kernel\Repositorys\AbstraceRepository;
use Illuminate\Support\Facades\DB;
use Simon\Kernel\Repositorys\RepositoryInterface;
use Simon\Safe\Container;
use Simon\Safe\Listeners\VerifyCode;
use Simon\User\Exceptions\PasswordErrorException;
use Simon\User\Exceptions\UserNotExistsException;
use Simon\User\Models\User;
use Simon\User\Repositorys\Interfaces\UserRepositoryInterface;

class UserRepository extends AbstraceRepository implements UserRepositoryInterface
{

    /**
     * 邮件验证
     */
    const MAIL_STATUS_VERIFY = 1;

    /**
     * 邮件未验证
     */
    const MAIL_STATUS_NOT_VERIFY = 0;

    /**
     * 邮件验证失败
     */
    const MAIL_STATUS_VERIFY_FAIL = 2;

    /**
     *
     */
    const MAIL_STATUS = [
        self::MAIL_STATUS_VERIFY=>'已验证',
        self::MAIL_STATUS_NOT_VERIFY=>'未验证',
        self::MAIL_STATUS_VERIFY_FAIL=>'验证失败',
    ];


    /**
     *
     */
    const MOBILE_STATUS_VERIFY = 1;

    /**
     *
     */
    const MOBILE_STATUS_NOT_VERIFY = 0;

    /**
     *
     */
    const MOBILE_STATUS_VERIFY_FAIL = 2;

    /**
     *
     */
    const MOBILE_STATUS = [
        self::MOBILE_STATUS_VERIFY=>'已验证',
        self::MOBILE_STATUS_NOT_VERIFY=>'未验证',
        self::MOBILE_STATUS_VERIFY_FAIL=>'验证失败',
    ];

    /**
     * UserRepository constructor.
     * @param User $User
     */
    public function __construct(User $User)
    {
        parent::__construct($User);
    }

    public function findAllPaginate(int $perPage = 15, array $columns = ['*'])
    {
        // TODO: Change the autogenerated stub

        $models = parent::findAllPaginate($perPage, $columns);

        $models->each(function($model){
            $model->mail_status = $this->mailStatus()[$model->mail_status];
            $model->mobile_status = $this->mobileStatus()[$model->mobile_status];
        });

        return $models;
    }


    public function allPaginateBySearch(array $data) : RepositoryInterface
    {
        // TODO: Implement allPaginateBySearch() method.

        $this->query = $this->model->newQuery();

        if (!empty($data['user']))
        {
            $this->query->name("%{$data['user']}%",'like');
        }

        if (!empty($data['mail_status']))
        {
            $this->query->mailStatus($data['mail_status']);
        }

        if (!empty($data['mobile_status']))
        {
            $this->query->mobileStatus($data['mobile_status']);
        }

        return $this;
    }




    public function mobileStatusVerify() : int
    {
        return static::MOBILE_STATUS_VERIFY_FAIL;
    }

    public function mobileStatusNotVerify() : int
    {
        return static::MOBILE_STATUS_NOT_VERIFY;
    }

    public function mobileStatusVerifyFail() : int
    {
        return static::MOBILE_STATUS_VERIFY_FAIL;
    }

    public function mobileStatus() : array
    {
        return static::MOBILE_STATUS;
    }


    public function mailStatusVerify() : int
    {
        return static::MAIL_STATUS_VERIFY;
    }

    public function mailStatusNotVerify() : int
    {
        return static::MAIL_STATUS_NOT_VERIFY;
    }

    public function mailStatusVerifyFail() : int
    {
        return static::MAIL_STATUS_VERIFY_FAIL;
    }

    public function mailStatus() : array
    {
        return static::MAIL_STATUS;
    }

    protected function createPasswordConfusion(string $password, string $random) : string
    {
        // TODO: Implement createConfusion() method.
        return $random.$random.$password;
    }

    public function generatePassword(string $password,string $secretKey) : string
    {
        return bcrypt($this->createPasswordConfusion($password,$secretKey));
    }

    public function register(array $data, int $ip) : User
    {
        // TODO: Implement register() method.
        $secretKey = str_random(10);

        return $this->create([
            'name'=>$data['name'],
            'email'=>$data['email'],
            'password'=>$this->generatePassword($data['password'],$secretKey),
            'secret_key'=>$secretKey,
            'mail_status'=>static::MAIL_STATUS_NOT_VERIFY,
            'mobile_status'=>static::MOBILE_STATUS_NOT_VERIFY,
            'register_time'=>time(),
            'register_ip'=>$ip,
        ]);

    }


    public function login(array $data,int $ip) : User
    {
        $user = $this->findOneBy('name',$data['name']);

        if (empty($user))
        {
            safe()->attach(new VerifyCode());
            throw new UserNotExistsException(trans('user::user.user_not_exists'));
        }

        if (!$this->comparePassword($data['password'],$user))
        {safe()->attach(new VerifyCode());
            throw new PasswordErrorException(trans('user::user.password_error'));
        }

        //存储登录信息
        $user->login_time = time();
        $user->login_ip = $ip;
        $user->save();

        return $user;
    }

    public function updateMailStatus(int $userId,int $status) : bool
    {
        $this->model->where('id',$userId)->update(['mail_status'=>$status]);

        return true;
    }

    /**
     * @param $password
     * @return bool
     */
    public function comparePassword(string $password,User $user) : bool
    {
        $password = $this->createPasswordConfusion($password,$user->secret_key);
        return Hash::check($password,$user->password);
    }

    public function updatePassword(string $password,User $User) : User
    {
        // TODO: Implement updatePassword() method.
        $User->password = $password;
        $User->save();
        return $User;
    }


}